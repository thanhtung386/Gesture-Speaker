#include "BluetoothA2DPSink.h"
#include <EEPROM.h>
#include <Wire.h>

#include <U8g2lib.h>
#include "u8g2_font.h"

//#define btn 4
#include <Adafruit_NeoPixel.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
BluetoothA2DPSink a2dp_sink;

//Cau hinh OLED
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0,22,21,U8X8_PIN_NONE);

//Khai bao o nho eeprom de luu muc am luong truoc do
#define EEPROM_SIZE 1
//1. play 2. pause
//3. next 4. prev
//5. volume_up 6. volume_down

//khai bao bien luu mau led truoc do
int MOD = 0;

//khai bao chan cua led rgb
#define LED_PIN 19
//khai bao so luong bong led
#define NUMPIXELS 8
Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, NEO_GRB + NEO_KHZ800);
String color[7] = {"Red", "Orange", "Yellow","Green", "Blue","Indigo", "Violet"};
int32_t rainbow[7] = {0xFF0000, 0xFFA500, 0xFFFF00, 0x00FF00, 0x0000FF, 0x4B0082, 0x8F00FF};

static const uint8_t image_previous[128] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x80, 0x01, 0x30, 0x00, 0xE0, 0x01, 0x38, 0x00, 0xF0, 0x01, 0x3E, 
  0x00, 0xFC, 0x00, 0x3F, 0x00, 0xFF, 0xC1, 0x3F, 0x80, 0xFF, 0xF1, 0x3F, 
  0xE0, 0xFF, 0xF8, 0x3F, 0xF0, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0x3F, 
  0xFE, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0x3F, 
  0xF0, 0xFF, 0xFF, 0x3F, 0xE0, 0xFF, 0xF8, 0x3F, 0x80, 0xFF, 0xF1, 0x3F, 
  0x00, 0xFF, 0xC1, 0x3F, 0x00, 0xFC, 0x00, 0x3F, 0x00, 0xF0, 0x01, 0x3E, 
  0x00, 0xE0, 0x01, 0x38, 0x00, 0x80, 0x00, 0x30, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const uint8_t image_next[128] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 
  0x1E, 0xC0, 0x00, 0x00, 0x3C, 0xE0, 0x03, 0x00, 0xFE, 0xC0, 0x0F, 0x00, 
  0xFC, 0xE1, 0x1F, 0x00, 0xFC, 0xC7, 0x7F, 0x00, 0xFC, 0xEF, 0xFF, 0x00, 
  0xFC, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0x07, 
  0xFC, 0xFF, 0xFF, 0x03, 0xFC, 0xEF, 0xFF, 0x00, 0xFC, 0xC7, 0x7F, 0x00, 
  0xFC, 0xE1, 0x1F, 0x00, 0xFE, 0xE0, 0x0F, 0x00, 0x3E, 0xC0, 0x03, 0x00, 
  0x1C, 0xE0, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00,  
};
static const uint8_t image_pause[128] = {
 0x00, 0xFC, 0x03, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 
  0xE0, 0x03, 0x7C, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x78, 0x00, 0xE0, 0x01, 
  0x3C, 0x00, 0xC0, 0x03, 0x1C, 0x00, 0x80, 0x03, 0x0E, 0x00, 0x00, 0x07, 
  0x0E, 0x08, 0x00, 0x07, 0x07, 0x38, 0x00, 0x06, 0x07, 0xFC, 0x00, 0x0E, 
  0x07, 0xFC, 0x03, 0x0E, 0x07, 0xF8, 0x07, 0x0E, 0x07, 0xF8, 0x07, 0x0E, 
  0x07, 0xFC, 0x03, 0x0E, 0x07, 0xF8, 0x00, 0x0E, 0x07, 0x3C, 0x00, 0x0E, 
  0x0E, 0x18, 0x00, 0x07, 0x0E, 0x00, 0x00, 0x07, 0x1C, 0x00, 0x80, 0x03, 
  0x3C, 0x00, 0xC0, 0x03, 0x78, 0x00, 0xE0, 0x01, 0xF0, 0x00, 0xF0, 0x00, 
  0xE0, 0x03, 0x7C, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0x0F, 0x00, 
  0x00, 0xFC, 0x03, 0x00,
};

static const uint8_t image_continue[128] = {
0x00, 0xFC, 0x01, 0x00, 0x80, 0xFF, 0x0F, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 
  0xF0, 0xFF, 0x7F, 0x00, 0xF8, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0x01, 
  0xFC, 0xFF, 0xFF, 0x03, 0xFE, 0xF1, 0xF8, 0x03, 0xFE, 0xF1, 0xF8, 0x07, 
  0xFF, 0xF1, 0xF8, 0x07, 0xFF, 0xF0, 0xF8, 0x0F, 0xFF, 0x71, 0xF8, 0x0F, 
  0xFF, 0xF1, 0xF8, 0x0F, 0xFF, 0xF1, 0xF8, 0x0F, 0xFF, 0x70, 0xF8, 0x0F, 
  0xFF, 0xF1, 0xF8, 0x0F, 0xFF, 0xF0, 0xF8, 0x0F, 0xFF, 0x71, 0xF8, 0x07, 
  0xFE, 0xF1, 0xF8, 0x07, 0xFE, 0xF1, 0xF8, 0x07, 0xFE, 0xF1, 0xF8, 0x03, 
  0xFC, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0x00, 
  0xE0, 0xFF, 0x7F, 0x00, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0x0F, 0x00, 
  0x00, 0xFC, 0x01, 0x00, 
};

static const uint8_t image_volume[128] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xE0, 0x00, 
  0x00, 0x00, 0xC0, 0x00, 0x00, 0x18, 0x80, 0x01, 0x00, 0x1E, 0x8C, 0x03, 
  0x00, 0x1F, 0x1C, 0x03, 0x80, 0x1F, 0x38, 0x07, 0xE0, 0x9F, 0x31, 0x06, 
  0xF4, 0x1F, 0x73, 0x06, 0xFF, 0x1F, 0x67, 0x0C, 0xFF, 0x1F, 0x66, 0x0C, 
  0xFF, 0x0F, 0x66, 0x0C, 0xFF, 0x1F, 0xE6, 0x0C, 0xFF, 0x1F, 0x66, 0x0C, 
  0xFF, 0x1F, 0x66, 0x0C, 0xFF, 0x1F, 0x66, 0x0C, 0xFF, 0x1F, 0x67, 0x0C, 
  0xF2, 0x1F, 0x73, 0x0E, 0xE0, 0x8F, 0x31, 0x06, 0x80, 0x1F, 0x38, 0x06, 
  0x00, 0x1F, 0x1C, 0x03, 0x00, 0x0E, 0x8C, 0x03, 0x00, 0x18, 0x84, 0x01, 
  0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x40, 0x00, 
  0x00, 0x00, 0x00, 0x00,
};

const unsigned char  chumtay [] PROGMEM = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,
 0x0f,0x00,0x00,0x38,0x18,0x00,0x00,0x8c,0x37,0x00,0x00,0xc6,0x38,0x00,0x00,
 0x23,0x60,0x00,0x80,0x11,0x40,0x00,0x80,0x08,0x46,0x00,0x80,0x00,0x89,0x00,
 0x40,0x80,0x90,0x00,0x60,0x40,0xf0,0x01,0x20,0x40,0x30,0x01,0x10,0x40,0x10,
 0x01,0x10,0x80,0x8c,0x00,0x08,0x00,0x83,0x00,0x08,0x00,0xc0,0x00,0x08,0x00,
 0x40,0x00,0x08,0x00,0x38,0x00,0x08,0x00,0x06,0x00,0x10,0xc0,0x01,0x00,0xe0,
 0x3f,0x00,0x00,0x00,0x00,0x00,0x00
  
};
const unsigned char  matduoi [] PROGMEM = {
0x00,0xc0,0x01,0x00,0x00,0x20,0x03,0x00,0x00,0x20,0x02,0x00,0x00,0x3c,0x1e,
 0x00,0x00,0x26,0x12,0x00,0x00,0x22,0x12,0x00,0x00,0x22,0xf2,0x00,0x00,0x22,
 0xb2,0x01,0x00,0x22,0x12,0x01,0x00,0x22,0x12,0x01,0x00,0x22,0x12,0x01,0x00,
 0x22,0x12,0x01,0x70,0x22,0x12,0x01,0x98,0x23,0x13,0x01,0x18,0x33,0x33,0x01,
 0x10,0x03,0x00,0x01,0x30,0x06,0x00,0x01,0x20,0x06,0x00,0x01,0x40,0x7c,0x00,
 0x01,0x40,0x80,0x00,0x01,0x40,0x80,0x01,0x01,0xc0,0x00,0x01,0x01,0x80,0x01,
 0x80,0x00,0x00,0x03,0x80,0x00,0x00,0x06,0x40,0x00,0x00,0x0c,0x60,0x00,0x00,
 0x08,0x20,0x00,0x00,0x08,0x20,0x00
};
const unsigned char  namdam [] PROGMEM = {
   0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x06,0x04,0x00,0x80,0x01,0x04,
 0x00,0x60,0x00,0x04,0x00,0x18,0x00,0xfc,0x07,0x0c,0x08,0x04,0x08,0x04,0x08,
 0x00,0x08,0x02,0x08,0x00,0x08,0x01,0x08,0x04,0x08,0x01,0x08,0xfc,0x07,0x01,
 0x08,0x04,0x06,0x01,0x08,0x04,0x04,0x01,0x00,0x04,0x04,0x00,0x10,0x04,0x04,
 0x01,0x6c,0x06,0x02,0xc1,0x83,0xcf,0x03,0x01,0x80,0x00,0x02,0x01,0x80,0x00,
 0x04,0x01,0x80,0x00,0x04,0x01,0x80,0x01,0x02,0x01,0x00,0xff,0x01,0x02,0x80,
 0x01,0x01,0x02,0x80,0x00,0x01,0x04,0x80,0x00,0x01,0x18,0x80,0x00,0x01,0xe0,
 0xff,0xff,0x00,0x00,0x00,0x00,0x00
};
const unsigned char  ok [] PROGMEM = {
  0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x68,0x01,0x00,0x80,0xcb,0x03,
 0x00,0x80,0xce,0x04,0x00,0x80,0x44,0x04,0x00,0x80,0x64,0x02,0x00,0x80,0x24,
 0x02,0x00,0x80,0x14,0x03,0x00,0x80,0x94,0x07,0x00,0x80,0xcc,0x18,0x00,0x80,
 0x24,0x60,0x00,0x80,0x10,0x40,0x00,0x80,0x08,0x46,0x00,0x80,0x00,0x89,0x00,
 0x40,0x80,0x90,0x00,0x60,0x40,0xf0,0x01,0x20,0x40,0x30,0x01,0x10,0x40,0x10,
 0x00,0x10,0x80,0x8f,0x00,0x08,0x00,0x83,0x00,0x08,0x00,0xc0,0x00,0x08,0x00,
 0x40,0x00,0x08,0x00,0x38,0x00,0x08,0x00,0x06,0x00,0x10,0xc0,0x01,0x00,0xe0,
 0x3f,0x00,0x00,0x00,0x00,0x00,0x00
};
const unsigned char  hi [] PROGMEM = {
  0x00,0x18,0x00,0x00,0x00,0x3c,0x1c,0x00,0x00,0x24,0x3e,0x00,0x00,0x24,0x32,
 0x00,0x00,0x64,0x32,0x00,0x00,0x64,0x12,0x00,0x00,0x4c,0x13,0x00,0x00,0xcc,
 0x19,0x00,0x00,0xcc,0x19,0x00,0x00,0xde,0x09,0x00,0xc0,0x9b,0x09,0x00,0x60,
 0xd3,0x0d,0x00,0x60,0xf3,0x0f,0x00,0x20,0x13,0x18,0x00,0x60,0x13,0x30,0x00,
 0x60,0xfb,0x61,0x00,0xe0,0x8f,0x43,0x00,0x60,0x00,0x43,0x00,0x20,0x80,0x41,
 0x00,0x60,0xc0,0x40,0x00,0x60,0x40,0x60,0x00,0x60,0x60,0x60,0x00,0xc0,0x40,
 0x30,0x00,0x80,0x01,0x18,0x00,0x00,0x01,0x08,0x00,0x00,0x01,0x08,0x00,0x00,
 0xff,0x0f,0x00,0x00,0xff,0x0f,0x00
};
const unsigned char  like [] PROGMEM = {
   0x00,0xe0,0x01,0x00,0x00,0x30,0x03,0x00,0x00,0x30,0x06,0x00,0x00,0x30,0x06,
 0x00,0x00,0x30,0x06,0x00,0x00,0x10,0x06,0x00,0x00,0x18,0x06,0x00,0x00,0x0c,
 0x06,0x00,0x00,0x0c,0x02,0x00,0x00,0x02,0x03,0x00,0x80,0x81,0xff,0x00,0xe0,
 0xc0,0x81,0x01,0x70,0xc0,0x00,0x01,0x30,0xc0,0x80,0x01,0x18,0x80,0xff,0x01,
 0x08,0xc0,0xff,0x03,0x0c,0x40,0x00,0x03,0x0c,0x70,0x00,0x03,0x0c,0xff,0xff,
 0x03,0x0c,0x8f,0xff,0x01,0x0c,0x80,0x81,0x01,0x0c,0x80,0x00,0x01,0x0c,0x80,
 0x81,0x01,0x18,0x80,0xff,0x01,0x38,0x80,0xff,0x00,0x70,0x80,0x81,0x01,0xe0,
 0x81,0xc1,0x00,0x80,0xff,0xff,0x00
};

const unsigned char  giotay [] PROGMEM  = {
 0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x48,0x00,
 0x00,0x00,0x48,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x90,
 0x00,0x00,0x00,0x9e,0x00,0x00,0xc0,0xa5,0x00,0x00,0xa0,0xa4,0x00,0x00,0xa0,
 0xa4,0x00,0x00,0xa0,0xa4,0x78,0x00,0x20,0xa5,0x44,0x00,0x60,0x35,0x23,0x00,
 0x50,0x1f,0x10,0x00,0x90,0x00,0x08,0x00,0x10,0x00,0x08,0x00,0x10,0x00,0x04,
 0x00,0x20,0x00,0x03,0x00,0x20,0xe0,0x00,0x00,0x40,0x20,0x00,0x00,0x40,0x10,
 0x00,0x00,0x60,0x10,0x00,0x00,0x20,0x10,0x00,0x00,0x20,0x10,0x00,0x00,0xe0,
 0x1f,0x00,0x00,0x00,0x00,0x00,0x00 };
//Hàm xóa từng dòng trên oled
//Line bắt đầu từ 0
void clear_text(int line){
  u8g2.setDrawColor(0);
  u8g2.drawBox(0,line*12,128,12);
  u8g2.sendBuffer();
}
//In tiêu đề bài hát
void avrc_metadata_callback(uint8_t id, const uint8_t *text) {
  if (id== ESP_AVRC_MD_ATTR_TITLE){
  clear_text(0);
  clear_text(1);
  u8g2.setDrawColor(1);
  u8g2.setCursor(0,12);
  u8g2.print((char *)text);
  u8g2.sendBuffer();
  }
}

void clean_insert_volume(const uint8_t* image, int volume){
    u8g2.setDrawColor(0);
    u8g2.drawBox(79,24,48,28);
    u8g2.drawBox(0,52,128,12);
    u8g2.setDrawColor(1);
    u8g2.drawXBM(79,24,28,28,image);

    u8g2.setDrawColor(0);
    u8g2.drawBox(0,52,128,12);
    u8g2.setDrawColor(1);
    u8g2.setCursor(85,64);
    u8g2.print(int(volume*0.7878));
    u8g2.sendBuffer();  
}

//Xóa và cập nhật lại hình
void clean_insert_image(const uint8_t* image,int MOD){
    if(MOD == 0){
    u8g2.setDrawColor(0);
    u8g2.drawBox(0,24,48,28);
    u8g2.drawBox(0,52,128,12);
    u8g2.setDrawColor(1);
    u8g2.drawXBM(19,24,28,28,image);
    u8g2.sendBuffer();
    }
    else{
    u8g2.setDrawColor(0);
    u8g2.drawBox(79,24,48,28);
    u8g2.drawBox(0,52,128,12);
    u8g2.setDrawColor(1);
    u8g2.drawXBM(79,24,28,28,image);
    u8g2.sendBuffer();   
    }
}
//Hiển thị volume khi thay đổi
void volumeChanged(int new_volume) {
  EEPROM.write(0, new_volume);
  EEPROM.commit(); 
  clean_insert_image(image_volume,1);
  u8g2.setDrawColor(0);
  u8g2.drawBox(0,52,128,12);
  //u8g2.sendBuffer();
  u8g2.setDrawColor(1);
  u8g2.setCursor(85,64);
  u8g2.print(int(new_volume*0.7878));
  u8g2.sendBuffer();
}

//Hiển thị trạng thái khi thay đổi
void audio_state_changed(esp_a2d_audio_state_t state, void *ptr) {
  if (a2dp_sink.to_str(state) == "Suspended") {
    clean_insert_image(image_pause,1);
    Serial.println("Suspended");
  }
  else if(a2dp_sink.to_str(state) == "Started"){
    clean_insert_image(image_continue,1);
    Serial.println("Started");
  }
}

//Kiểm tra và thực thi chức năng tương ứng với cử chỉ
void check(int gesture){
  if(gesture == 1) {
    a2dp_sink.play();
    clean_insert_image(image_continue,1);
  }
  if(gesture == 2) {
    a2dp_sink.pause();
    clean_insert_image(image_pause,1);
  }
  if(gesture == 3) {
    a2dp_sink.next();
    clean_insert_image(image_next,1);
  }
  if(gesture == 4) {
    a2dp_sink.previous();
    clean_insert_image(image_previous,1);
  }
  if (gesture == 5) {
    a2dp_sink.set_volume(a2dp_sink.get_volume() + 10);  
    clean_insert_volume(image_volume,a2dp_sink.get_volume());   
    EEPROM.write(0, a2dp_sink.get_volume());
    EEPROM.commit();  
  }
  if (gesture == 6) {
    if((a2dp_sink.get_volume() - 10) <= 0){
        a2dp_sink.set_volume(0); 
        clean_insert_volume(image_volume,0);
    }
    else{
          a2dp_sink.set_volume(a2dp_sink.get_volume() - 10); 
          clean_insert_volume(image_volume,a2dp_sink.get_volume());
    }
        EEPROM.write(0, a2dp_sink.get_volume());
        EEPROM.commit();
  }  
  if(gesture == 7){
    if(MOD == 7) {
      pixels.clear();
      pixels.show(); 
      u8g2.setDrawColor(0);
      u8g2.drawBox(79,24,48,28);
      u8g2.drawBox(0,52,128,12);
      u8g2.setDrawColor(1);
      u8g2.setCursor(79,40);
      u8g2.print("LED OFF");
      u8g2.sendBuffer();
      MOD=0;
    }
    else{
          u8g2.setDrawColor(0);
    u8g2.drawBox(79,24,48,28);
    u8g2.drawBox(0,52,128,12);
    u8g2.setDrawColor(1);
    u8g2.setCursor(79,40);
    u8g2.print(color[MOD]);
    u8g2.sendBuffer(); 
          pixels.fill(rainbow[MOD],0,8);
          pixels.show();
          MOD++;
    }
  }
}

void setup() {
  //pinMode(btn,INPUT_PULLUP);
    Serial.begin(115200);  
    Serial2.begin(115200);
    EEPROM.begin(EEPROM_SIZE);
    i2s_pin_config_t my_pin_config = {
        .bck_io_num = 12,
        .ws_io_num = 13,
        .data_out_num = 14,
        .data_in_num = I2S_PIN_NO_CHANGE
    };
    a2dp_sink.set_pin_config(my_pin_config);   
    a2dp_sink.start("GESTURE SPEAKER");
    a2dp_sink.set_volume(EEPROM.read(0));
    //a2dp_sink.set_on_connection_state_changed(connection_state_changed);
    a2dp_sink.set_on_audio_state_changed(audio_state_changed);
    a2dp_sink.set_avrc_metadata_callback(avrc_metadata_callback);
    a2dp_sink.set_on_volumechange(volumeChanged);      
    
    Wire.begin();      
    delay(500);
    u8g2.begin();
    u8g2.enableUTF8Print();  
    u8g2.setFont(segoeui); 
    u8g2.setFontDirection(0);
    u8g2.clearBuffer();  
}

void loop() {
  if (Serial2.available()) {
    String a = Serial2.readString();
    char b = a.charAt(0);
    Serial.print(a);
    if(b == '2'){
    check(1) ;
    clean_insert_image(like,0);
    }
    else if(b == '3'){
    check(2) ;
    clean_insert_image(ok,0);
    }
    else if(b == '4'){
    check(3) ;
    clean_insert_image(matduoi,0);
    }
    else if(b == '5'){
    check(4) ;
    clean_insert_image(namdam,0);
    }
    else if(b == '6'){
    check(5) ;
    clean_insert_image(hi,0);
    }
    else if(b == '7'){
    check(6) ;
    clean_insert_image(chumtay,0);
    }
    else if(b == '8'){
    check(7);
    clean_insert_image(giotay,0);
    }
  }
}
